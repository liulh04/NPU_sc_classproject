# generated by Scratch
# powered by hqyj
import paho.mqtt.client as mqtt
from queue import Queue
import json
import sys
import os
from ui import Ui_MainWindow
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import time
import yaml
import threading


# mqtt客户端类代码位置：开始
class HQYJMqttClient:
    def __init__(self, broker_ip: str, broker_port: int):
        self.mqtt_queue = Queue(255)
        self.is_connected = False
        self.client = mqtt.Client()
        self.client.on_message = self.on_message
        self.client.on_connect = self.on_connect
        self.rc = 100
        try:
            self.client.connect(broker_ip, broker_port, 3)
        except Exception as e:
            print(e)

    def on_message(self, client, userdata, message):
        msg = json.loads(message.payload.decode())
        self.mqtt_queue.put(msg)

    def on_connect(self, client, userdata, flags, rc):
        print("连接返回结果码:", rc)
        self.rc = rc


# mqtt客户端类代码位置：结束


class MyWindow(QMainWindow, Ui_MainWindow):
    signal_connect_status = pyqtSignal(bool)

    def __init__(self):
        super(MyWindow, self).__init__()
        self.setupUi(self)
        self.prompt_png = "./images/prompt.png"
        self.setMinimumSize(640, 400)

        icon = QIcon()
        icon.addPixmap(QPixmap("./images/logo.ico"), QIcon.Normal, QIcon.Off)
        self.setWindowIcon(icon)
        self.signal_connect_status.connect(self.connected_status)
        try:
            self.cfg_data = None
            with open("static/config.yml", "r", encoding="utf-8") as file:
                self.cfg_data = yaml.load(file, Loader=yaml.FullLoader)
        except Exception as e:
            self.create_message_box(self.prompt_png, '提示', 'static/config.yml不存在或出现问题{}！'.format(e), '确认', '取消')
            os._exit(0)
        try:
            self.project_name = self.cfg_data["project_name"]
            self.label_project_name.setGeometry(0, 30, 640, 50)
            self.label_project_name.setAlignment(Qt.AlignCenter)
            self.label_project_name.setText(self.project_name)
        except:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中project_name有问题', '确认', '取消')
            os._exit(0)
        try:
            self.trigger_sensor = self.cfg_data["trigger_sensor"]
        except:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中trigger_sensor有问题', '确认', '取消')
            os._exit(0)
        try:
            self.trigger_sensor_type = self.cfg_data["trigger_sensor_type"]
            if self.trigger_sensor_type == "boolean":
                try:
                    self.trigger_sensor_true_cn = self.cfg_data["trigger_sensor_true_cn"]
                    self.trigger_sensor_false_cn = self.cfg_data["trigger_sensor_false_cn"]
                except:
                    self.create_message_box(self.prompt_png, '提示', 'config.yml中trigger_sensor_true_cn或者trigger_sensor_false_cn有问题', '确认',
                                            '取消')
                    os._exit(0)
            elif self.trigger_sensor_type == "number":
                pass
            else:
                self.create_message_box(self.prompt_png, '提示', 'config.yml中trigger_sensor_type只可以是number或者boolean', '确认', '取消')
                os._exit(0)
        except:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中trigger_sensor_type有问题', '确认', '取消')
            os._exit(0)
        try:
            self.trigger_sensor_name = self.cfg_data["trigger_sensor_name"]
            self.trigger_sensor_unit = self.cfg_data["trigger_sensor_unit"]
            trigger_sensor_name_chinese_count = self.chinese_char_count(self.trigger_sensor_name)
            self.trigger_sensor_name_length = (len(self.trigger_sensor_name) - trigger_sensor_name_chinese_count) * 15 + \
                                              trigger_sensor_name_chinese_count * 30
            self.trigger_sensor_unit_length = len(self.trigger_sensor_unit.encode('utf-8')) * 15
            self.label_trigger_sensor_name.setGeometry(50, 120, self.trigger_sensor_name_length + 20, 50)
            self.label_trigger_sensor_name.setText(self.trigger_sensor_name + ":")
        except:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中trigger_sensor_name或者\ntrigger_sensor_unit有问题', '确认', '取消')
            os._exit(0)
        try:
            self.back_ground = self.cfg_data["back_ground"]
            png = QPixmap(self.back_ground)
            self.label_back_ground.setPixmap(png)
            # 图片自适应窗口大小
            self.label_back_ground.setScaledContents(True)
        except:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中back_ground有问题', '确认', '取消')
            os._exit(0)
        try:
            self.respond_open_trigger_status = int(self.cfg_data["respond_open_trigger_status"])
            self.respond_close_trigger_status = int(self.cfg_data["respond_close_trigger_status"])
        except:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中respond_open_trigger_status或者respond_close_trigger_status有问题', '确认',
                                    '取消')
            os._exit(0)
        try:
            self.respond_sensor = self.cfg_data["respond_sensor"]
        except Exception as e:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中respond_sensor有问题:{}'.format(e), '确认', '取消')
            os._exit(0)
        try:
            self.respond_sensor_name = self.cfg_data["respond_sensor_name"]
            respond_sensor_name_chinese_count = self.chinese_char_count(self.respond_sensor_name)
            self.respond_sensor_name_length = (len(self.respond_sensor_name) - respond_sensor_name_chinese_count) * 15 + \
                                              respond_sensor_name_chinese_count * 30
            self.label_respond_sensor_name.setGeometry(50, 230, self.respond_sensor_name_length + 20, 50)
            self.label_respond_sensor_name.setText(self.respond_sensor_name + ":")
        except Exception as e:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中respond_sensor_name有问题:{}'.format(e), '确认', '取消')
            os._exit(0)
        try:
            self.respond_sensor_open_img = self.cfg_data["respond_sensor_open_img"]
            self.respond_sensor_close_img = self.cfg_data["respond_sensor_close_img"]
            self.label_respond_img.setGeometry(70 + self.respond_sensor_name_length, 200, 100, 100)
            close_png = QPixmap(self.respond_sensor_close_img)
            self.label_respond_img.setPixmap(close_png)
            self.label_respond_img.setScaledContents(True)
        except Exception as e:
            self.create_message_box(self.prompt_png, '提示', 'config.yml中respond_sensor_open_img有问题:{}'.format(e), '确认', '取消')
            os._exit(0)

        self.setWindowTitle(self.project_name)

        t_data_process = threading.Thread(target=self.data_process)
        t_data_process.start()

    def closeEvent(self, event):  # 函数名固定不可变
        os._exit(0)

    def create_message_box(self, icon, title, content, btn_y, btn_n):
        message_box = QMessageBox()
        message_box.setWindowIcon(QIcon(icon))
        message_box.setWindowTitle(title)
        message_box.setText(content)
        message_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        button_y = message_box.button(QMessageBox.Yes)
        button_y.setText(btn_y)
        button_n = message_box.button(QMessageBox.No)
        button_n.setText(btn_n)
        message_box.exec_()
        if message_box.clickedButton() == button_y:
            return True
        else:
            return False

    def chinese_char_count(self, str_str):
        count = 0
        if str == type(str_str):
            for str_tmp in str_str:
                if ord(str_tmp) - ord('0') >= 128:
                    count += 1
        return count

    def connected_status(self, status):
        if status:
            pass
        else:
            self.create_message_box(self.prompt_png, '提示', '连接失败：注意端口号和服务是否开启！', '确认', '取消')
            os._exit(0)

    def data_process(self):
        try:
            # 数据处理代码位置：开始
            # 注意：在websocket端口是9001，如使用Python代码，端口需手动改成1883。
            hqyj_mqtt_clt = HQYJMqttClient('127.0.0.1', 1883)
            hqyj_mqtt_clt.client.loop_start()
            time.sleep(3)
            print(hqyj_mqtt_clt.rc)
            if hqyj_mqtt_clt.rc == 0:
                print('MQTT连接成功')
                self.signal_connect_status.emit(True)
                hqyj_mqtt_clt.client.subscribe('SoftWareToScratch', qos=0)
                while True:
                    mqtt_data = hqyj_mqtt_clt.mqtt_queue.get()
                    if (self.trigger_sensor in mqtt_data) and ('id' in mqtt_data) and (mqtt_data['id'] == 0):
                        if self.trigger_sensor_type == "number":
                            self.label_trigger_sensor_value.setGeometry(70 + self.trigger_sensor_name_length, 120,
                                                                        self.trigger_sensor_unit_length + len(
                                                                            str(mqtt_data[self.trigger_sensor]).encode('utf-8')) * 15, 50)
                            self.label_trigger_sensor_value.setText(str(mqtt_data[self.trigger_sensor]) + self.trigger_sensor_unit)
                            if (float(mqtt_data[self.trigger_sensor])) > self.respond_open_trigger_status:
                                hqyj_mqtt_clt.client.publish('ScratchToSoftWare',
                                                             payload=json.dumps(({self.respond_sensor: False, "id": 0}),
                                                                                ensure_ascii=False))
                                close_png = QPixmap(self.respond_sensor_close_img)
                                self.label_respond_img.setPixmap(close_png)
                                self.label_respond_img.setScaledContents(True)
                            if (float(mqtt_data[self.trigger_sensor])) < self.respond_close_trigger_status:
                                hqyj_mqtt_clt.client.publish('ScratchToSoftWare',
                                                             payload=json.dumps(({self.respond_sensor: True, "id": 0}), ensure_ascii=False))
                                open_png = QPixmap(self.respond_sensor_open_img)
                                self.label_respond_img.setPixmap(open_png)
                                self.label_respond_img.setScaledContents(True)
                        elif self.trigger_sensor_type == "boolean":
                            sensor = list(mqtt_data.keys())[0]
                            self.label_trigger_sensor_value.setGeometry(70 + self.trigger_sensor_name_length, 120,
                                                                        self.trigger_sensor_unit_length + 90, 50)
                            self.label_trigger_sensor_value.setText(
                                self.trigger_sensor_true_cn if mqtt_data[sensor] else self.trigger_sensor_false_cn)
                            if mqtt_data[self.trigger_sensor] == self.respond_close_trigger_status:
                                hqyj_mqtt_clt.client.publish('ScratchToSoftWare',
                                                             payload=json.dumps(({self.respond_sensor: False, "id": 0}),
                                                                                ensure_ascii=False))
                                close_png = QPixmap(self.respond_sensor_close_img)
                                self.label_respond_img.setPixmap(close_png)
                                self.label_respond_img.setScaledContents(True)
                            elif mqtt_data[self.trigger_sensor] == self.respond_open_trigger_status:
                                hqyj_mqtt_clt.client.publish('ScratchToSoftWare',
                                                             payload=json.dumps(({self.respond_sensor: True, "id": 0}), ensure_ascii=False))
                                open_png = QPixmap(self.respond_sensor_open_img)
                                self.label_respond_img.setPixmap(open_png)
                                self.label_respond_img.setScaledContents(True)



            # 数据处理代码位置：结束
            else:
                self.signal_connect_status.emit(False)
        except Exception as e:
            self.create_message_box(self.prompt_png, '提示', e, '确认', '取消')


if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = MyWindow()
    MainWindow.show()
    sys.exit(app.exec_())
